# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IndicesEspectrais
                                 A QGIS plugin
 Esse plugin calcula indices espectrais de um raster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Henrique Peschl/UFPR
        email                : henriquepeschl@ufpr.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QFileDialog
from qgis.core import *
from osgeo import gdal, gdal_array, ogr
from numpy import *
from qgis.gui import QgsFileWidget
from qgis.utils import iface
import os


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .indices_espectrais_dialog import IndicesEspectraisDialog
import os.path


class IndicesEspectrais:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'IndicesEspectrais_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Indices Espectrais')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('IndicesEspectrais', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/indices_espectrais/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calcular indices espectrais'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Indices Espectrais'),
                action)
            self.iface.removeToolBarIcon(action)
            
     
    

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = IndicesEspectraisDialog()

        # show the dialog
        self.dlg.show()
        
        self.dlg.QgsFileWidget_save.setStorageMode(QgsFileWidget.GetDirectory)
        
        self.dlg.comboBox_tipo.clear()
        self.dlg.comboBox_tipo.addItem("NDVI", "NDVI")
        self.dlg.comboBox_tipo.addItem("NDWI", "NDWI")
        self.dlg.comboBox_tipo.addItem("NDBI", "NDBI")
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            caminho = self.dlg.QgsFileWidget_save.filePath()
            caminho = caminho.replace("\\", "/")
            
            index = self.dlg.comboBox_tipo.currentIndex()            
            tipo = self.dlg.comboBox_tipo.itemData(index) 
            
            def calc_ndvi():
            
                vermelho = self.dlg.MapLayerComboBox_R.currentLayer()
                iv = self.dlg.MapLayerComboBox_IV.currentLayer()
            
                g = gdal.Open(vermelho.dataProvider().dataSourceUri())
                band3 = g.ReadAsArray()
                g = gdal.Open(iv.dataProvider().dataSourceUri())
                band4 = g.ReadAsArray()
            
                band3 = array(band3, dtype = float)
                band4 = array(band4, dtype = float)
            
                var1 = subtract(band4, band3) 
                var2 = add(band4, band3)
            
                ndvi = divide(var1,var2)
            
                geo = g.GetGeoTransform()  
                proj = g.GetProjection()   
                shape = band3.shape
            
                os.chdir(r'{}'.format(caminho))
                driver = gdal.GetDriverByName('GTiff')
                dst_ds = driver.Create( "ndviplugin.tif", shape[1], shape[0], 1, gdal.GDT_Float32)
            
                dst_ds.SetGeoTransform( geo ) 
                dst_ds.SetProjection( proj )

                dst_ds.GetRasterBand(1).WriteArray( ndvi)
                dst_ds.FlushCache()

            def calc_ndwi():
            
                verde = self.dlg.MapLayerComboBox_G.currentLayer()
                iv = self.dlg.MapLayerComboBox_IV.currentLayer()
            
                g = gdal.Open(verde.dataProvider().dataSourceUri())
                band2 = g.ReadAsArray()
                g = gdal.Open(iv.dataProvider().dataSourceUri())
                band4 = g.ReadAsArray()
            
                band2 = array(band2, dtype = float)
                band4 = array(band4, dtype = float)
            
                var1 = subtract(band2, band4) 
                var2 = add(band2, band4)
            
                ndwi = divide(var1,var2)
            
                geo = g.GetGeoTransform()  
                proj = g.GetProjection()   
                shape = band2.shape
            
                os.chdir(r'{}'.format(caminho))
                driver = gdal.GetDriverByName('GTiff')
                dst_ds = driver.Create( "ndwiplugin.tif", shape[1], shape[0], 1, gdal.GDT_Float32)
            
                dst_ds.SetGeoTransform( geo ) 
                dst_ds.SetProjection( proj )

                dst_ds.GetRasterBand(1).WriteArray(ndwi)
                dst_ds.FlushCache()

            def calc_ndbi():
            
                ivm = self.dlg.MapLayerComboBox_IVM.currentLayer()
                iv = self.dlg.MapLayerComboBox_IV.currentLayer()
            
                g = gdal.Open(ivm.dataProvider().dataSourceUri())
                band5 = g.ReadAsArray()
                g = gdal.Open(iv.dataProvider().dataSourceUri())
                band4 = g.ReadAsArray()
            
                band5 = array(band5, dtype = float)
                band4 = array(band4, dtype = float)
            
                var1 = subtract(band5, band4) 
                var2 = add(band5, band4)
            
                ndbi = divide(var1,var2)
            
                geo = g.GetGeoTransform()  
                proj = g.GetProjection()   
                shape = band4.shape
            
                os.chdir(r'{}'.format(caminho))
                driver = gdal.GetDriverByName('GTiff')
                dst_ds = driver.Create( "ndbiplugin.tif", shape[1], shape[0], 1, gdal.GDT_Float32)
            
                dst_ds.SetGeoTransform( geo ) 
                dst_ds.SetProjection( proj )

                dst_ds.GetRasterBand(1).WriteArray( ndbi)
                dst_ds.FlushCache()
   
            if tipo == "NDVI":
                calc_ndvi()
                
                caminho_ndvi = caminho + "/" + "ndviplugin.tif"
                camada = QgsRasterLayer(caminho_ndvi, "NDVI")
                QgsProject.instance().addMapLayer(camada)
                
                fcn = QgsColorRampShader()
                fcn.setColorRampType(QgsColorRampShader.Discrete)
                lst = [ QgsColorRampShader.ColorRampItem(0, QColor(215,25,28), '<0'),
                QgsColorRampShader.ColorRampItem(0.15, QColor(253,174,97),'0~0.15' ),
                QgsColorRampShader.ColorRampItem(0.30, QColor(255,255,192),'0.15~0.30' ), 
                QgsColorRampShader.ColorRampItem(0.45, QColor(166,217,106),'0.30~0.45' ),
                QgsColorRampShader.ColorRampItem(1, QColor(26,150,65), '>0.45') ]
                
                fcn.setColorRampItemList(lst)
                shader = QgsRasterShader()
                shader.setRasterShaderFunction(fcn)
                
                renderer = QgsSingleBandPseudoColorRenderer(camada.dataProvider(), 1, shader)
                camada.setRenderer(renderer)
                camada.triggerRepaint()
                
            elif tipo == "NDWI":
                calc_ndwi()
                
                caminho_ndwi = caminho + "/" + "ndwiplugin.tif"
                camada = QgsRasterLayer(caminho_ndwi, "NDWI")
                QgsProject.instance().addMapLayer(camada)
                
                fcn = QgsColorRampShader()
                fcn.setColorRampType(QgsColorRampShader.Discrete)
                lst = [ QgsColorRampShader.ColorRampItem(-0.45, QColor(215,25,28),'<= -0.45'),
                QgsColorRampShader.ColorRampItem(-0.30, QColor(253,174,97),'-0.45 ~ -0.30'),
                QgsColorRampShader.ColorRampItem(-0.15, QColor(255,255,191),'-0.30 ~ -0.15'), 
                QgsColorRampShader.ColorRampItem(0, QColor(171,217,233),'-0.15 ~ 0'),
                QgsColorRampShader.ColorRampItem(1, QColor(44,123,182),'>0') ]
                
                fcn.setColorRampItemList(lst)
                shader = QgsRasterShader()
                shader.setRasterShaderFunction(fcn)
                
                renderer = QgsSingleBandPseudoColorRenderer(camada.dataProvider(), 1, shader)
                camada.setRenderer(renderer)
                camada.triggerRepaint()
                
            elif tipo == "NDBI":
                calc_ndbi()
                
                caminho_ndbi = caminho + "/" + "ndbiplugin.tif"
                camada = QgsRasterLayer(caminho_ndbi, "NDBI")
                QgsProject.instance().addMapLayer(camada)
                
                fcn = QgsColorRampShader()
                fcn.setColorRampType(QgsColorRampShader.Discrete)
                lst = [ QgsColorRampShader.ColorRampItem(-0.2, QColor(26,150,65), '<-0.2'),
                QgsColorRampShader.ColorRampItem(-0.1, QColor(166,217,106),'-0.2 ~ -0.1' ),
                QgsColorRampShader.ColorRampItem(0, QColor(255,255,192),'-0.1 ~ 0' ), 
                QgsColorRampShader.ColorRampItem(0.1, QColor(253,174,97),'0 ~ 0.1' ),
                QgsColorRampShader.ColorRampItem(1, QColor(215,25,28), '>0.1') ]
                
                fcn.setColorRampItemList(lst)
                shader = QgsRasterShader()
                shader.setRasterShaderFunction(fcn)
                
                renderer = QgsSingleBandPseudoColorRenderer(camada.dataProvider(), 1, shader)
                camada.setRenderer(renderer)
                camada.triggerRepaint()
            
            #QMessageBox.information(self.iface.mainWindow(),"Info","%s" %(caminho_ndvi))
            
            
            
            